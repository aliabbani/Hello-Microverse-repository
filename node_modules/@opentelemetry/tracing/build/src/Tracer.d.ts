import * as api from '@opentelemetry/api';
import { InstrumentationLibrary } from '@opentelemetry/core';
import { Resource } from '@opentelemetry/resources';
import { BasicTracerProvider } from './BasicTracerProvider';
import { TraceParams, TracerConfig } from './types';
/**
 * This class represents a basic tracer.
 */
export declare class Tracer implements api.Tracer {
    private _tracerProvider;
    private readonly _sampler;
    private readonly _traceParams;
    private readonly _idGenerator;
    readonly resource: Resource;
    readonly instrumentationLibrary: InstrumentationLibrary;
    /**
     * Constructs a new Tracer instance.
     */
    constructor(instrumentationLibrary: InstrumentationLibrary, config: TracerConfig, _tracerProvider: BasicTracerProvider);
    /**
     * Starts a new Span or returns the default NoopSpan based on the sampling
     * decision.
     */
    startSpan(name: string, options?: api.SpanOptions, context?: api.Context): api.Span;
    /** Returns the active {@link TraceParams}. */
    getActiveTraceParams(): TraceParams;
    getActiveSpanProcessor(): import("./SpanProcessor").SpanProcessor;
}
//# sourceMappingURL=Tracer.d.ts.map