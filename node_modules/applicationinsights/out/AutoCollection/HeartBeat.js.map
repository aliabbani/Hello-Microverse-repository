{"version":3,"file":"HeartBeat.js","sourceRoot":"","sources":["../../AutoCollection/HeartBeat.ts"],"names":[],"mappings":"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","sourcesContent":["import os = require(\"os\");\r\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\r\nimport Constants = require(\"../Declarations/Constants\");\r\nimport Util = require(\"../Library/Util\");\r\nimport Config = require(\"../Library/Config\");\r\nimport Context = require(\"../Library/Context\");\r\nimport AutoCollectHttpDependencies = require(\"../AutoCollection/HttpDependencies\");\r\n\r\nconst AIMS_URI = \"http://169.254.169.254/metadata/instance/compute\";\r\nconst AIMS_API_VERSION = \"api-version=2017-12-01\";\r\nconst AIMS_FORMAT = \"format=json\";\r\nconst ConnectionErrorMessage = \"ENETUNREACH\";\r\n\r\nclass HeartBeat {\r\n\r\n    public static INSTANCE: HeartBeat;\r\n\r\n    private _collectionInterval: number = 900000;\r\n    private _client: TelemetryClient;\r\n    private _handle: NodeJS.Timer | null;\r\n    private _isEnabled: boolean;\r\n    private _isInitialized: boolean;\r\n    private _isVM: boolean;\r\n    private _vmData = <{[key: string]: string}>{};\r\n    private _azInst_vmId: string = \"\";\t\r\n    private _azInst_subscriptionId: string = \"\";\t\r\n    private _azInst_osType: string = \"\";\r\n\r\n    constructor(client: TelemetryClient) {\r\n        if (!HeartBeat.INSTANCE) {\r\n            HeartBeat.INSTANCE = this;\r\n        }\r\n\r\n        this._isInitialized = false;\r\n        this._client = client;\r\n    }\r\n\r\n    public enable(isEnabled: boolean, config?: Config) {\r\n        this._isEnabled = isEnabled;\r\n        if (this._isEnabled && !this._isInitialized) {\r\n            this._isInitialized = true;\r\n        }\r\n\r\n        if (isEnabled) {\r\n            if (!this._handle) {\r\n                this._handle = setInterval(() => this.trackHeartBeat(config, () => {}), this._collectionInterval);\r\n                this._handle.unref(); // Allow the app to terminate even while this loop is going on\r\n            }\r\n        } else {\r\n            if (this._handle) {\r\n                clearInterval(this._handle);\r\n                this._handle = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public isInitialized() {\r\n        return this._isInitialized;\r\n    }\r\n\r\n    public static isEnabled() {\r\n        return HeartBeat.INSTANCE && HeartBeat.INSTANCE._isEnabled;\r\n    }\r\n\r\n    public trackHeartBeat(config: Config, callback: () => void) {\r\n        let waiting: boolean = false;\r\n        let properties: {[key: string]: string} = {};\r\n        const sdkVersion = Context.sdkVersion; // \"node\" or \"node-nativeperf\"\r\n        properties[\"sdk\"] = sdkVersion;\r\n        properties[\"osType\"] = os.type();\r\n        if (process.env.WEBSITE_SITE_NAME) { // Web apps\r\n            properties[\"appSrv_SiteName\"] = process.env.WEBSITE_SITE_NAME || \"\";\r\n            properties[\"appSrv_wsStamp\"] = process.env.WEBSITE_HOME_STAMPNAME || \"\";\r\n            properties[\"appSrv_wsHost\"] = process.env.WEBSITE_HOSTNAME || \"\";\r\n        } else if (process.env.FUNCTIONS_WORKER_RUNTIME) { // Function apps\r\n            properties[\"azfunction_appId\"] = process.env.WEBSITE_HOSTNAME;\r\n        } else if (config) {\r\n            if (this._isVM === undefined) {\r\n                waiting = true;\r\n                this._getAzureComputeMetadata(config, () => {\r\n                    if (this._isVM && Object.keys(this._vmData).length > 0) { // VM\r\n                        properties[\"azInst_vmId\"] = this._vmData[\"vmId\"] || \"\";\r\n                        properties[\"azInst_subscriptionId\"] = this._vmData[\"subscriptionId\"] || \"\";\r\n                        properties[\"azInst_osType\"] = this._vmData[\"osType\"] || \"\";\r\n                        this._azInst_vmId = this._vmData[\"vmId\"] || \"\";\r\n                        this._azInst_subscriptionId = this._vmData[\"subscriptionId\"] || \"\";\r\n                        this._azInst_osType = this._vmData[\"osType\"] || \"\";\r\n                    }\r\n                    this._client.trackMetric({name: Constants.HeartBeatMetricName, value: 0, properties: properties});\r\n                    callback();\r\n                });\r\n            } else if (this._isVM) {\r\n                properties[\"azInst_vmId\"] = this._azInst_vmId;\t\r\n                properties[\"azInst_subscriptionId\"] = this._azInst_subscriptionId;\t\r\n                properties[\"azInst_osType\"] = this._azInst_osType;\r\n            }\r\n        }\r\n        if (!waiting) {\r\n            this._client.trackMetric({name: Constants.HeartBeatMetricName, value: 0, properties: properties});\r\n            callback();\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        HeartBeat.INSTANCE = null;\r\n        this.enable(false);\r\n        this._isInitialized = false;\r\n    }\r\n\r\n    private _getAzureComputeMetadata(config: Config, callback: () => void) {\r\n        const metadataRequestUrl = `${AIMS_URI}?${AIMS_API_VERSION}&${AIMS_FORMAT}`;\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            [AutoCollectHttpDependencies.disableCollectionRequestOption]: true,\r\n            headers: {\r\n                \"Metadata\": \"True\",\r\n            }\r\n        };\r\n\r\n        const req = Util.makeRequest(config, metadataRequestUrl, requestOptions, (res) => {\r\n            if (res.statusCode === 200) {\r\n                // Success; VM\r\n                this._isVM = true;\r\n                let virtualMachineData = \"\";\r\n                res.on('data', (data: any) => {\r\n                    virtualMachineData += data;\r\n                });\r\n                res.on('end', () => {\r\n                    this._vmData = this._isJSON(virtualMachineData) ? JSON.parse(virtualMachineData) : {};\r\n                    callback();\r\n                });\r\n            } else {\r\n                // else Retry on next heartbeat metrics call\r\n                callback();\r\n            }\r\n        });\r\n        if (req) {\r\n            req.on('error', (error: Error) => {\r\n                // Unable to contact endpoint.\r\n                // Do nothing for now.\r\n                if (error && error.message && error.message.indexOf(ConnectionErrorMessage) > -1) {\r\n                    this._isVM = false; // confirm it's not in VM\r\n                }\r\n                // errors other than connect ENETUNREACH - retry\r\n                callback();\r\n            });\r\n            req.end();\r\n        }\r\n    }\r\n\r\n    private _isJSON(str: string): boolean {\r\n        try {\r\n            return (JSON.parse(str) && !!str);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport = HeartBeat;\r\n"]}